# If you come from bash you might have to change your $PATH.
export PATH=$HOME/bin:$HOME/.local/bin:$HOME/.cargo/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load. Optionally, if you set this to "random"
# it'll load a random theme each time that oh-my-zsh is loaded.
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="powerlevel10k/powerlevel10k"

# Uncomment the following line to use case-sensitive completion.
CASE_SENSITIVE="false"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
export UPDATE_ZSH_DAYS=7

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
    # asdf
    gcloud
    git
    history-substring-search
    kubectl
    nix-shell
    zsh-autosuggestions
    zsh-syntax-highlighting
)
bindkey '^ ' autosuggest-accept

source $ZSH/oh-my-zsh.sh

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# Bat
command -v bat >/dev/null && alias cat='bat -pp'

# Clipboard access
alias pbcopy='xsel --clipboard --input'
alias pbpaste='xsel --clipboard --output'

# Current working directory (cwd)
alias cwd='pwd | awk -F/ "{print \$NF}"'

# Docker
alias dexit='docker exec -it'
alias dex='docker exec'
alias drund='docker run -d --rm'
alias drunit="docker run -d --entrypoint '' --init --rm"

# History
HISTSIZE=50000
SAVEHIST=50000
setopt INC_APPEND_HISTORY # immediately append to history file
setopt EXTENDED_HISTORY # record timestamp in history
setopt HIST_EXPIRE_DUPS_FIRST # expire duplicate entries first when trimming history
setopt HIST_IGNORE_DUPS # don't record an entry that was just recorded again
setopt HIST_IGNORE_ALL_DUPS # delete old recorded entry if new entry is a duplicate
setopt HIST_FIND_NO_DUPS # do not display a line previously found
setopt HIST_IGNORE_SPACE # don't record an entry starting with a space
setopt HIST_SAVE_NO_DUPS # don't write duplicate entries in the history file
setopt SHARE_HISTORY # share history between all sessions
unsetopt HIST_VERIFY # execute commands using history (e.g.: using !$) immediately

# Kubeconfig
alias kckc='echo $KUBECONFIG'

# Kubectl plugin: ctx
alias kx='kubectl ctx'

# Kubectl plugin: ns
alias kn='kubectl ns'

# Nap
alias napl='nap $(nap list | gum filter)'

# Neovim
alias vi='nvim'
alias vim='nvim'

# Proxy
PROXY_SRC=
NO_PROXY_SRC='"localhost,127.0.0.1"'
alias proxy_up='export ftp_proxy=$PROXY_SRC http_proxy=$PROXY_SRC https_proxy=$PROXY_SRC no_proxy=$NO_PROXY_SRC'
alias proxy_down='unset ftp_proxy http_proxy https_proxy no_proxy'

# Steampipe
alias sp='steampipe'

# Tidy-viewer
alias tv='tidy-viewer'

# Which
alias '?'='which'

# User configuration

# Ansible
export ANSIBLE_NOCOWS=1

# Atuin
export ATUIN_NOBIND="true"

# Deno
if [ -f ~/.deno/bin/deno ]; then
    export DENO_INSTALL=~/.deno
    export PATH="$PATH:$DENO_INSTALL/bin"
    mkdir -p ~/.oh-my-zsh/custom/plugins/deno
    deno completions zsh >~/.oh-my-zsh/custom/plugins/deno/_deno
fi

# Difft
export DFT_GRAPH_LIMIT=30000000

# Editor
# Preferred editor for local and remote sessions
export EDITOR=nvim
export VISUAL=nvim

# Gitconfig
export GIT_SSH_COMMAND=${GIT_SSH_COMMAND:-ssh}
export REVIEW_BASE=origin/main

# Github
export GH=~/projects/src/github.com

# Gitlab
export GL=~/projects/src/gitlab.com

# Golang
export GOPRIVATE=github.com/bukalapak,*.bukalapak.io

# GPG
if [[ ! "$(echo $OSTYPE | tr -d '[:digit:][:punct:]')" == "darwin" ]]; then
    export GPG_TTY=$(tty)
    [[ ! -n "${SSH_AUTH_SOCK+1}" ]] && export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
fi

# GRC
# Run the following command to enable GRC
# echo "export ENABLE_GRC=yes" >> ~/.zprofile
[[ -n "$ENABLE_GRC" && -s "/etc/grc.zsh" ]] && source /etc/grc.zsh || true

# Julia
if [ -d ~/.local/julia ]; then
    export JULIAROOT=~/.local/julia
    export PATH="$PATH:$JULIAROOT/bin"
fi

# Kotlin
if [ -d ~/.local/kotlin ]; then
    export KTROOT=~/.local/kotlin
    export PATH="$PATH:$KTROOT/bin"
fi

# Krew
[[ -d "${HOME}/.krew/bin" ]] && export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

# Kubernetes
command -v kubectl >/dev/null && source <(kubectl completion zsh) || true

# Language
# You may need to manually set your language environment
# export LANG=en_US.UTF-8
# export LC_ALL=en_US.UTF-8

# Linkerd
[[ -d "${HOME}/.linkerd2" ]] && export PATH="${PATH}:${HOME}/.linkerd2/bin"

# Minio client
if [ $(command -v mc) ]; then
    autoload -U +X bashcompinit && bashcompinit
    complete -o nospace -C $(command -v mc) mc
fi

# Nim
[[ -d "${HOME}/.local/nim/bin" ]] && export PATH="${PATH}:${HOME}/.local/nim/bin:${HOME}/.nimble/bin"

# Nix
if [ -e ~/.nix-profile/etc/profile.d/nix.sh ]; then . ~/.nix-profile/etc/profile.d/nix.sh; fi # added by Nix installer

# NVM
if [ -s ~/.nvm/nvm.sh ]; then
    export NVM_DIR=~/.nvm
    source $NVM_DIR/nvm.sh
fi

# Perlbrew
[[ -s ~/.perlbrew/etc/zshrc ]] && source ~/./perlbrew/etc/zshrc || true

# Poetry
[[ -d "${HOME}/.poetry/bin" ]] && export PATH="$HOME/.poetry/bin:$PATH"

# Pyenv
if command -v pyenv 1>/dev/null 2>&1; then
    eval "$(pyenv init --path)"
    eval "$(pyenv init -)"
elif [ -d ~/.pyenv/bin ]; then
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init --path)"
    eval "$(pyenv init -)"
fi

# RVM
if [ -s ~/.rvm/scripts/rvm ]; then
    export rvm_ignore_gemrc_issues=1
    export rvm_silence_path_mismatch_check_flag=1
    source ~/.rvm/scripts/rvm
    # Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
    export PATH="$PATH:$HOME/.rvm/bin"
fi

# Starship
# Run the following command to enable starship
# echo "export ENABLE_STARSHIP=yes" >> ~/.zprofile
[ -n "$ENABLE_STARSHIP" ] && which starship >/dev/null && eval "$(starship init zsh)"

# Terraform
if [ $(command -v terraform) ]; then
    autoload -U +X bashcompinit && bashcompinit
    complete -o nospace -C $(command -v terraform) terraform
fi

# Tmux
if [[ -n "${TMUX+1}" && -n "${SSH_AUTH_SOCK+1}" ]]; then
    tmux set-environment SSH_AUTH_SOCK $SSH_AUTH_SOCK
fi

# Tmuxp
export DISABLE_AUTO_TITLE='true'

# Deduplicate PATH
export -U PATH

# Functions

# Name: body()
# Description: print the header (the first line of input)
# and then run the specified command on the body (the rest of the input)
# use it in a pipeline, e.g. ps | body grep somepattern
body() {
  IFS= read -r header
  printf '%s\n' "$header"
  "$@"
}

# Name: br()
# Description: custom broot function, need broot to be installed
br() {
  local cmd cmd_file code
  cmd_file=$(mktemp)
  if broot --outcmd "$cmd_file" "$@"
  then
    cmd=$(<"$cmd_file")
    command rm -f "$cmd_file"
    eval "$cmd"
  else
    code=$?
    command rm -f "$cmd_file"
    return "$code"
  fi
}

# Name: die()
# Description: exit with an error message
die() {
  printf '%s\n' "$1" >&2
  exit 1
}

# Name: gch()
# Description: fuzzy find through your git branches
gch() {
  git checkout "$(git branch --all | fzf | tr -d '[:space:]\*')"
}

# Name: lg()
# Description: change directory into that repo on exiting lazygit
lg()
{
  export LAZYGIT_NEW_DIR_FILE=~/.lazygit/newdir
  lazygit "$@"
  if [ -f $LAZYGIT_NEW_DIR_FILE ]; then
    cd "$(cat $LAZYGIT_NEW_DIR_FILE)"
    rm -f $LAZYGIT_NEW_DIR_FILE > /dev/null
  fi
}

# Name: prev
# Description: register previous command snippet with pet
function prev()
{
  PREV=$(fc -lrn | head -n 1)
  sh -c "pet new `printf %q "$PREV"`"
}

# Name: pet-select
# Description: select snippet from pet
function pet-select() {
  BUFFER=$(pet search --query "$LBUFFER")
  CURSOR=$#BUFFER
  zle redisplay
}

# Name: git_main_branch
# Description: return the main git branch
function git_main_branch() {
  def=`git remote show origin | sed -n '/HEAD branch/s/.*: //p'`
  echo $def
}

# Bind Keys

# Atuin
bindkey '^r' _atuin_search_widget

# Pet
zle -N pet-select
stty -ixon
bindkey '^s' pet-select
